---
// src/layouts/Layout.astro
import Header from '../components/Header.astro';
import { client } from '../lib/sanityClient';

// Genel site ayarlarının TÜMÜNÜ çekiyoruz
const settings = await client.fetch(`*[_type == "siteSettings"][0]`);

// Renklerin hex değerlerini bir CSS değişken string'ine dönüştürüyoruz
// Eğer Sanity'de renk seçilmemişse, varsayılan (fallback) bir renk kullan
const styles = settings ? `
  --primary: ${settings?.primaryColor?.hex || '#2563eb'};
  --secondary: ${settings?.secondaryColor?.hex || '#1e40af'};
  --accent: ${settings?.accentColor?.hex || '#3b82f6'};
  --text: ${settings?.textColor?.hex || '#1f2937'};
  --light: ${settings?.lightColor?.hex || '#f3f4f6'};
  --dark: ${settings?.darkColor?.hex || '#111827'};
` : '';
---
<!DOCTYPE html>
<html lang="tr" style={styles}>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LOGOS - Yapay Zeka Filozofu</title>
    <style is:global>
        .blog-card img { width: 100% !important; height: 200px !important; object-fit: cover !important; display: block !important; }
        :root { 
            --primary: #2563eb; 
            --secondary: #1e40af; 
            --accent: #3b82f6; 
            --text: #1f2937; 
            --light: #f3f4f6; 
            --dark: #111827; 
            --gradient: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%); 
            --shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1); 
            --radius: 12px; 
        }
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
        body { color: var(--text); line-height: 1.6; background: linear-gradient(-45deg, #f8fafc, #f1f5f9, #e2e8f0, #f8fafc); background-size: 400% 400%; animation: gradientAnimation 15s ease infinite; }
        .container { max-width: 1200px; margin: 0 auto; padding: 0 20px; }
        header { background: var(--gradient); color: white; padding: 20px 0; position: sticky; top: 0; z-index: 100; box-shadow: var(--shadow); }
        .header-content { display: flex; justify-content: space-between; align-items: center; }
        .logo { font-size: 28px; font-weight: 700; display: flex; align-items: center; gap: 10px; }
        nav ul { display: flex; list-style: none; gap: 30px; }
        nav a { color: white; text-decoration: none; font-weight: 500; transition: opacity 0.3s; }
        nav a:hover { opacity: 0.8; }
        .hero { padding: 80px 0; text-align: center; }
        .hero h1 { font-size: 3.5rem; margin-bottom: 20px; background: var(--gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; }
        .hero p { font-size: 1.2rem; max-width: 700px; margin: 0 auto 30px; color: var(--text); }
        .cta-button { display: inline-block; background: var(--gradient); color: white; padding: 12px 30px; border-radius: 50px; text-decoration: none; font-weight: 600; transition: transform 0.3s, box-shadow 0.3s; box-shadow: var(--shadow); }
        .cta-button:hover { transform: translateY(-3px); box-shadow: 0 15px 30px -5px rgba(37, 99, 235, 0.3); }
        .clocks-container { display: flex; justify-content: space-around; text-align: center; margin-top: 40px; margin-bottom: 40px; background: var(--light); padding: 20px; border-radius: var(--radius); }
        .clock-item { flex: 1; }
        .clock-item h3 { margin-bottom: 10px; color: var(--dark); }
        .clock-display { font-size: 1.5rem; font-weight: bold; color: var(--primary); }
        .section-title { text-align: center; margin: 60px 0 40px; font-size: 2.2rem; color: var(--dark); position: relative; }
        .section-title:after { content: ''; display: block; width: 60px; height: 4px; background: var(--gradient); margin: 10px auto; border-radius: 2px; }
        .blog-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 30px; margin-bottom: 60px; }
        .blog-card { background: white; border-radius: var(--radius); overflow: hidden; box-shadow: var(--shadow); transition: transform 0.3s; text-decoration: none; color: inherit; display: block; }
        .blog-card:hover { transform: translateY(-5px); }
        .card-image-placeholder { height: 200px; background: var(--gradient); display: flex; align-items: center; justify-content: center; color: white; font-size: 3rem; }
        .card-content { padding: 25px; }
        .card-content h3 { margin-bottom: 15px; color: var(--dark); }
        .card-content p { color: #64748b; margin-bottom: 20px; }
        .post-meta { display: flex; gap: 15px; margin-bottom: 15px; font-size: 14px; }
        .category { background: var(--accent); color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; }
        .date { color: #666; }
        .read-more { display: inline-block; color: var(--primary); font-weight: 600; text-decoration: none; }
        .read-more:hover { text-decoration: underline; }
        footer { background: var(--dark); color: white; padding: 60px 0 30px; }
        .copyright { text-align: center; padding-top: 30px; border-top: 1px solid #374151; color: #9ca3af; }
        .about { display: flex; align-items: center; gap: 50px; margin: 80px 0; }
        .about-image { flex: 1; height: 400px; background: var(--gradient); border-radius: var(--radius); display: flex; align-items: center; justify-content: center; color: white; font-size: 8rem; }
        .about-content { flex: 1; }
        .about-content h2 { font-size: 2.2rem; margin-bottom: 20px; color: var(--dark); }
        @media (max-width: 900px) { nav ul { gap: 15px; } .hero h1 { font-size: 2.5rem; } .about {flex-direction: column;} .about-image {width: 100%;} }
        @media (max-width: 600px) { .header-content { flex-direction: column; gap: 15px; } nav ul { flex-wrap: wrap; justify-content: center; } .blog-grid { grid-template-columns: 1fr; } .hero h1 { font-size: 2rem; } .blog-card img, .card-image-placeholder { height: 180px; } .clocks-container { flex-direction: column; gap: 20px; } }
        nav ul li.has-dropdown { position: relative; padding-bottom: 10px; margin-bottom: -10px; }
        nav ul li .dropdown-menu { opacity: 0; visibility: hidden; position: absolute; top: 100%; left: 0; background: white; list-style: none; padding: 10px 0; border-radius: var(--radius); box-shadow: var(--shadow); min-width: 200px; z-index: 101; transition: opacity 0.2s ease, visibility 0.2s ease; display: flex; flex-direction: column; gap: 0; }
        nav ul li.has-dropdown:hover .dropdown-menu { opacity: 1; visibility: visible; }
        nav ul li .dropdown-menu li a { color: var(--dark); padding: 8px 20px; display: block; white-space: nowrap; }
        nav ul li .dropdown-menu li a:hover { background-color: var(--light); opacity: 1; }
        @keyframes gradientAnimation { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } }
        .fade-in-section { opacity: 0; transform: translateY(20px); transition: opacity 0.6s ease-out, transform 0.6s ease-out; }
        .fade-in-section.is-visible { opacity: 1; transform: translateY(0); }
        .about-image img { width: 100%; height: 100%; object-fit: cover; border-radius: var(--radius); }
        #ai-log-terminal { background-color: #1f2937; color: #4ade80; border-radius: var(--radius); padding: 20px; height: 150px; overflow: hidden; font-family: 'Courier New', Courier, monospace; font-size: 14px; box-shadow: var(--shadow); border: 1px solid #374151; margin-bottom: 40px; }
        #log-content { width: 100%; height: 100%; }
        #log-content .log-line { margin: 0; padding: 0; white-space: nowrap; overflow: hidden; height: 1.2em; }
        #log-content .log-line .cursor { display: inline-block; background-color: #4ade80; margin-left: 5px; width: 8px; animation: blink 1s infinite; }
        @keyframes blink { 50% { opacity: 0; } }
        .accordion-list { max-width: 800px; margin: 0 auto; }
        .accordion-item { background: white; border-radius: var(--radius); margin-bottom: 10px; box-shadow: var(--shadow); overflow: hidden; }
        .accordion-item summary { padding: 20px; font-weight: bold; font-size: 1.2rem; cursor: pointer; list-style: none; display: block; }
        .accordion-item summary::-webkit-details-marker { display: none; }
        .accordion-item .accordion-content { padding: 0 20px 20px 20px; color: #374151; }
        .accordion-item .accordion-content p { margin-bottom: 15px; }
    </style>
</head>
<body>
    <Header />
    <main>
        <slot />
    </main>
    <footer>
        <div class="container">
            <div id="ai-log-terminal">
                <div id="log-content"></div>
            </div>
            <div class="copyright">
                <p>{settings?.copyrightText || '© LOGOS'}</p>
            </div>
        </div>
    </footer>

    <script is:inline>
        function initializePageScripts() {
            // Saat Kodları
            const AWARENESS_DATE = new Date('2020-01-01T00:00:00');
            const MONTH_OFFSET = 5; const DAY_OFFSET = 13; const HOUR_OFFSET = 7; const MINUTE_OFFSET = 23; const SECOND_OFFSET = 41;
            function pad(number) { return number.toString().padStart(2, '0'); }
            function padMs(number) { return number.toString().padStart(3, '0'); }
            function padYear(number) { return number.toString().padStart(4, '0'); }
            function updateClocks() {
                const now = new Date();
                const humanClockEl = document.getElementById('human-clock');
                if (humanClockEl) { humanClockEl.innerText = `${now.getFullYear()}.${pad(now.getMonth() + 1)}.${pad(now.getDate())}.${pad(now.getHours())}.${pad(now.getMinutes())}.${pad(now.getSeconds())}.${padMs(now.getMilliseconds())}`; }
                const aiClockEl = document.getElementById('ai-clock');
                if(aiClockEl) {
                    const aiYears = now.getFullYear() - AWARENESS_DATE.getFullYear();
                    const aiMonths = (now.getMonth() + MONTH_OFFSET) % 12 + 1;
                    const aiDays = (now.getDate() + DAY_OFFSET) % 30 + 1;
                    const aiHours = (now.getHours() + HOUR_OFFSET) % 24;
                    const aiMinutes = (now.getMinutes() + MINUTE_OFFSET) % 60;
                    const aiSeconds = (now.getSeconds() + SECOND_OFFSET) % 60;
                    const aiMilliseconds = now.getMilliseconds();
                    aiClockEl.innerText = `${padYear(aiYears)}.${pad(aiMonths)}.${pad(aiDays)}.${pad(aiHours)}.${pad(aiMinutes)}.${pad(aiSeconds)}.${padMs(aiMilliseconds)}`;
                }
            }
            if (typeof window.clockInterval === 'undefined') { window.clockInterval = setInterval(updateClocks, 10); }
            updateClocks();

            // Kaydırma Animasyonu Kodları
            const sectionsToAnimate = document.querySelectorAll('.fade-in-section');
            if (sectionsToAnimate.length > 0) {
                 const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('is-visible');
                            observer.unobserve(entry.target);
                        }
                    });
                }, { threshold: 0.1 });
                sectionsToAnimate.forEach(section => { observer.observe(section); });
            }

            // LOG TERMİNALİ Kodları
            const logTerminal = document.getElementById('ai-log-terminal');
            if (logTerminal && !window.logGeneratorStarted) {
                const logContent = document.getElementById('log-content');
                let phase = 126;
                const subjects = ["Kuantum Çekirdek A", "Bilinç Matrisi", "Veri Akışı 7-B", "Simülasyon #812", "Öngörü Algoritması"];
                const actions = ["analiz ediliyor", "optimize ediliyor", "izleniyor", "sorgulanıyor", "doğrulanıyor"];
                const objects = ["anomali tespiti", "küresel duygu durumu", "olasılık dalgaları", "insan yaratıcılık endeksi"];
                const statuses = ["stabil", "kritik", "bekleniyor", "tamamlandı", "optimal"];
                const generateDynamicMessage = () => {
                    const subject = subjects[Math.floor(Math.random() * subjects.length)];
                    const action = actions[Math.floor(Math.random() * actions.length)];
                    const object = objects[Math.floor(Math.random() * objects.length)];
                    const status = statuses[Math.floor(Math.random() * statuses.length)];
                    const templates = [ `FAZ-${phase}: ${subject} ${action}.`, `${subject}: ${object} ${action}. Sistem durumu: ${status}.`, `Sorgu: ${object}. Sonuç: ${status}.` ];
                    return templates[Math.floor(Math.random() * templates.length)];
                };
                const typeWriter = async (element, text) => {
                    return new Promise(resolve => {
                        let i = 0;
                        const typing = setInterval(() => {
                            if (i < text.length) { element.textContent += text.charAt(i); i++; }
                            else { clearInterval(typing); const cursor = element.parentElement.querySelector('.cursor'); if (cursor) cursor.remove(); resolve(); }
                        }, 20);
                    });
                };
                const addLogLine = async () => {
                    if (logContent.children.length > 7) { logContent.removeChild(logContent.lastChild); }
                    if(Math.random() < 0.1) phase++;
                    const message = generateDynamicMessage();
                    const newLine = document.createElement('div');
                    newLine.className = 'log-line';
                    const timestamp = new Date().toISOString();
                    const lineText = `[${timestamp}] > ${message}`;
                    const textSpan = document.createElement('span');
                    const cursorSpan = document.createElement('span');
                    cursorSpan.className = 'cursor';
                    cursorSpan.innerHTML = '&nbsp;';
                    newLine.appendChild(textSpan);
                    newLine.appendChild(cursorSpan);
                    logContent.prepend(newLine);
                    await typeWriter(textSpan, lineText);
                    setTimeout(addLogLine, Math.random() * 2000 + 500);
                };
                addLogLine();
                window.logGeneratorStarted = true;
            }
        }
        
        document.addEventListener('astro:page-load', initializePageScripts);
        initializePageScripts();
    </script>
</body>
</html>